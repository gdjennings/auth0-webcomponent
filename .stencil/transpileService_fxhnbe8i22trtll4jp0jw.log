{"moduleFile":{"sourceFilePath":"/Users/gdjennings/Documents/workspace/auth0-webcomponent/src/components/auth0-authenticate/auth0-authenticate.tsx","jsFilePath":"/Users/gdjennings/Documents/workspace/auth0-webcomponent/src/components/auth0-authenticate/auth0-authenticate.js","cmps":[{"isLegacy":false,"tagName":"auth0-authenticate","excludeFromCollection":false,"isCollectionDependency":false,"componentClassName":"Auth0Authenticate","elementRef":null,"encapsulation":"none","properties":[{"name":"clientId","type":"string","attribute":"client-id","reflect":false,"mutable":false,"required":false,"optional":false,"complexType":{"original":"string","resolved":"string","references":{}},"docs":{"tags":[],"text":""},"internal":false},{"name":"domain","type":"string","attribute":"domain","reflect":false,"mutable":false,"required":false,"optional":false,"complexType":{"original":"string","resolved":"string","references":{}},"docs":{"tags":[],"text":""},"internal":false},{"name":"redirectUri","type":"string","attribute":"redirect-uri","reflect":false,"mutable":false,"required":false,"optional":false,"defaultValue":"location.origin","complexType":{"original":"string","resolved":"string","references":{}},"docs":{"tags":[],"text":""},"internal":false},{"name":"popup","type":"boolean","attribute":"popup","reflect":false,"mutable":false,"required":false,"optional":false,"complexType":{"original":"boolean","resolved":"boolean","references":{}},"docs":{"tags":[],"text":""},"internal":false}],"virtualProperties":[],"states":[],"methods":[{"name":"login","docs":{"text":"","tags":[]},"complexType":{"signature":"() => Promise<any>","parameters":[],"references":{"Promise":{"location":"global"},"Response":{"location":"global"}},"return":"Promise<any>"},"internal":false},{"name":"logout","docs":{"text":"","tags":[]},"complexType":{"signature":"() => Promise<any>","parameters":[],"references":{"Promise":{"location":"global"}},"return":"Promise<any>"},"internal":false},{"name":"isAuthenticated","docs":{"text":"","tags":[]},"complexType":{"signature":"() => Promise<any>","parameters":[],"references":{"Promise":{"location":"global"}},"return":"Promise<any>"},"internal":false},{"name":"getUser","docs":{"text":"","tags":[]},"complexType":{"signature":"() => Promise<any>","parameters":[],"references":{"Promise":{"location":"global"}},"return":"Promise<any>"},"internal":false},{"name":"getApiAccessToken","docs":{"text":"","tags":[]},"complexType":{"signature":"(audience: string, scopes: string) => Promise<{ accessToken: string; }>","parameters":[{"tags":[],"text":""},{"tags":[],"text":""}],"references":{"Promise":{"location":"global"}},"return":"Promise<{ accessToken: string; }>"},"internal":false}],"listeners":[],"events":[],"watchers":[],"styles":[{"modeName":"$","styleId":"AUTH0-AUTHENTICATE","styleStr":null,"styleIdentifier":null,"compiledStyleText":null,"compiledStyleTextScoped":null,"compiledStyleTextScopedCommented":null,"externalStyles":[{"absolutePath":"/Users/gdjennings/Documents/workspace/auth0-webcomponent/src/components/auth0-authenticate/auth0-authenticate.css","relativePath":"auth0-authenticate.css","originalComponentPath":"auth0-authenticate.css"}]}],"legacyConnect":[],"legacyContext":[],"internal":false,"assetsDirs":[],"styleDocs":[],"docs":{"tags":[],"text":""},"jsFilePath":"/Users/gdjennings/Documents/workspace/auth0-webcomponent/src/components/auth0-authenticate/auth0-authenticate.js","sourceFilePath":"/Users/gdjennings/Documents/workspace/auth0-webcomponent/src/components/auth0-authenticate/auth0-authenticate.tsx","hasAttributeChangedCallbackFn":false,"hasComponentWillLoadFn":true,"hasComponentDidLoadFn":false,"hasComponentWillUpdateFn":false,"hasComponentDidUpdateFn":false,"hasComponentWillRenderFn":false,"hasComponentDidRenderFn":false,"hasComponentDidUnloadFn":false,"hasConnectedCallbackFn":false,"hasDisconnectedCallbackFn":false,"hasElement":false,"hasEvent":false,"hasLifecycle":true,"hasListener":false,"hasListenerTarget":false,"hasListenerTargetWindow":false,"hasListenerTargetDocument":false,"hasListenerTargetBody":false,"hasListenerTargetParent":false,"hasMember":true,"hasMethod":true,"hasMode":false,"hasAttribute":true,"hasProp":true,"hasPropNumber":false,"hasPropBoolean":true,"hasPropString":true,"hasPropMutable":false,"hasReflect":false,"hasRenderFn":true,"hasState":false,"hasStyle":true,"hasVdomAttribute":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"hasWatchCallback":false,"isPlain":false,"htmlAttrNames":[],"htmlTagNames":[],"isUpdateable":true,"potentialCmpRefs":[]}],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@auth0/auth0-spa-js"],"hasVdomAttribute":true,"hasVdomClass":true,"hasVdomFunctional":true,"hasVdomKey":true,"hasVdomListener":true,"hasVdomRef":true,"hasVdomRender":false,"hasVdomStyle":true,"hasVdomText":true,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":["@auth0/auth0-spa-js"],"potentialCmpRefs":[]},"jsText":"import createAuth0Client from '@auth0/auth0-spa-js';\r\nexport class Auth0Authenticate {\r\n    constructor() {\r\n        this.redirectUri = location.origin;\r\n    }\r\n    render() { }\r\n    async componentWillLoad() {\r\n        console.debug('component loading');\r\n        this.auth0 = await createAuth0Client({\r\n            domain: this.domain,\r\n            audience: `https://${this.domain}/userinfo`,\r\n            client_id: this.clientId,\r\n            redirect_uri: this.redirectUri\r\n        });\r\n        if ((location.search || '').length > 0) {\r\n            this.auth0.handleRedirectCallback().catch(err => {\r\n                console.debug(err);\r\n            });\r\n        }\r\n    }\r\n    async login() {\r\n        if (!navigator.onLine) {\r\n            return false;\r\n        }\r\n        let onlineCheck = `https://${this.domain}`;\r\n        const timeout = new Promise((_resolve, reject) => {\r\n            setTimeout(() => {\r\n                reject(new Error('Auth0 unreachable'));\r\n            }, 5000);\r\n        });\r\n        const head = fetch(onlineCheck, {\r\n            method: \"HEAD\",\r\n            mode: \"no-cors\",\r\n            redirect: \"follow\",\r\n            cache: 'no-store',\r\n            headers: {\r\n                'ngsw-bypass': 'true'\r\n            }\r\n        });\r\n        try {\r\n            const onlineResponse = await Promise.race([timeout, head]);\r\n            console.log(\"Network ok, will try and authorise\");\r\n            try {\r\n                await this.auth0.getTokenSilently();\r\n                return true;\r\n            }\r\n            catch (noSession) {\r\n                if (onlineResponse && onlineResponse.status === 200) {\r\n                    return await this.auth0.loginWithRedirect();\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.warn(\"this.Auth0 unreachable: \" + err);\r\n            return false;\r\n        }\r\n    }\r\n    async logout() {\r\n        // Remove tokens and expiry time from localStorage\r\n        return this.auth0.logout({\r\n            returnTo: `${location.protocol}://${location.host}:${location.port}`\r\n        });\r\n    }\r\n    async isAuthenticated() {\r\n        return this.auth0.isAuthenticated();\r\n    }\r\n    async getUser() {\r\n        const user = await this.auth0.getUser();\r\n        const idToken = await this.auth0.getIdTokenClaims();\r\n        const profile = await fetch(`https://${this.domain}/api/v2/users/${user.sub}`, {\r\n            headers: {\r\n                authorization: `Bearer ${idToken.__raw}`\r\n            }\r\n        });\r\n        return await profile.json();\r\n    }\r\n    async getApiAccessToken(audience, scopes) {\r\n        try {\r\n            const apiToken = await this.auth0.getTokenSilently({\r\n                audience: audience,\r\n                scope: scopes\r\n            });\r\n            return {\r\n                accessToken: apiToken\r\n            };\r\n        }\r\n        catch (err) {\r\n            if (err.error === \"consent_required\") {\r\n                this.auth0.loginWithRedirect({\r\n                    audience: audience,\r\n                    scope: scopes\r\n                });\r\n            }\r\n        }\r\n    }\r\n    static get is() { return \"auth0-authenticate\"; }\r\n    static get originalStyleUrls() { return {\r\n        \"$\": [\"auth0-authenticate.css\"]\r\n    }; }\r\n    static get styleUrls() { return {\r\n        \"$\": [\"auth0-authenticate.css\"]\r\n    }; }\r\n    static get properties() { return {\r\n        \"clientId\": {\r\n            \"type\": \"string\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"string\",\r\n                \"resolved\": \"string\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"client-id\",\r\n            \"reflect\": false\r\n        },\r\n        \"domain\": {\r\n            \"type\": \"string\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"string\",\r\n                \"resolved\": \"string\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"domain\",\r\n            \"reflect\": false\r\n        },\r\n        \"redirectUri\": {\r\n            \"type\": \"string\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"string\",\r\n                \"resolved\": \"string\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"redirect-uri\",\r\n            \"reflect\": false,\r\n            \"defaultValue\": \"location.origin\"\r\n        },\r\n        \"popup\": {\r\n            \"type\": \"boolean\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"boolean\",\r\n                \"resolved\": \"boolean\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"popup\",\r\n            \"reflect\": false\r\n        }\r\n    }; }\r\n    static get methods() { return {\r\n        \"login\": {\r\n            \"complexType\": {\r\n                \"signature\": \"() => Promise<any>\",\r\n                \"parameters\": [],\r\n                \"references\": {\r\n                    \"Promise\": {\r\n                        \"location\": \"global\"\r\n                    },\r\n                    \"Response\": {\r\n                        \"location\": \"global\"\r\n                    }\r\n                },\r\n                \"return\": \"Promise<any>\"\r\n            },\r\n            \"docs\": {\r\n                \"text\": \"\",\r\n                \"tags\": []\r\n            }\r\n        },\r\n        \"logout\": {\r\n            \"complexType\": {\r\n                \"signature\": \"() => Promise<any>\",\r\n                \"parameters\": [],\r\n                \"references\": {\r\n                    \"Promise\": {\r\n                        \"location\": \"global\"\r\n                    }\r\n                },\r\n                \"return\": \"Promise<any>\"\r\n            },\r\n            \"docs\": {\r\n                \"text\": \"\",\r\n                \"tags\": []\r\n            }\r\n        },\r\n        \"isAuthenticated\": {\r\n            \"complexType\": {\r\n                \"signature\": \"() => Promise<any>\",\r\n                \"parameters\": [],\r\n                \"references\": {\r\n                    \"Promise\": {\r\n                        \"location\": \"global\"\r\n                    }\r\n                },\r\n                \"return\": \"Promise<any>\"\r\n            },\r\n            \"docs\": {\r\n                \"text\": \"\",\r\n                \"tags\": []\r\n            }\r\n        },\r\n        \"getUser\": {\r\n            \"complexType\": {\r\n                \"signature\": \"() => Promise<any>\",\r\n                \"parameters\": [],\r\n                \"references\": {\r\n                    \"Promise\": {\r\n                        \"location\": \"global\"\r\n                    }\r\n                },\r\n                \"return\": \"Promise<any>\"\r\n            },\r\n            \"docs\": {\r\n                \"text\": \"\",\r\n                \"tags\": []\r\n            }\r\n        },\r\n        \"getApiAccessToken\": {\r\n            \"complexType\": {\r\n                \"signature\": \"(audience: string, scopes: string) => Promise<{ accessToken: string; }>\",\r\n                \"parameters\": [{\r\n                        \"tags\": [],\r\n                        \"text\": \"\"\r\n                    }, {\r\n                        \"tags\": [],\r\n                        \"text\": \"\"\r\n                    }],\r\n                \"references\": {\r\n                    \"Promise\": {\r\n                        \"location\": \"global\"\r\n                    }\r\n                },\r\n                \"return\": \"Promise<{ accessToken: string; }>\"\r\n            },\r\n            \"docs\": {\r\n                \"text\": \"\",\r\n                \"tags\": []\r\n            }\r\n        }\r\n    }; }\r\n}\r\n"}